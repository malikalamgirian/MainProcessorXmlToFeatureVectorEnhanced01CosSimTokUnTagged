/*
 * MainProcessorXmlToFeatureVectorView.java
 */
package mainprocessorxmltofeaturevector;

import com.malikalamgirian.qaw.fyp.XmlToFeatureVectorProcessor;
import com.malikalamgirian.qaw.fyp.*;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class MainProcessorXmlToFeatureVectorView extends FrameView {

    public MainProcessorXmlToFeatureVectorView(SingleFrameApplication app) {
        super(app);

        /*
         * initializations
         */
        chooser = new JFileChooser();
        /*
         * initialize properties
         */
        properties = new Properties();

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MainProcessorXmlToFeatureVectorApp.getApplication().getMainFrame();
            aboutBox = new MainProcessorXmlToFeatureVectorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MainProcessorXmlToFeatureVectorApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBrowseXmlFile = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnBrowseOpenAmplifyResponsesFolder = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tarStatus = new javax.swing.JTextArea();
        btnProcess = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnTagFile = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnBrowseTaggedFile = new javax.swing.JButton();
        btnRemoveStopWords = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnBrowseStopWordRemovedFile = new javax.swing.JButton();
        btnApplyPosFilter = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnBrowsePosFilter = new javax.swing.JButton();
        btnApplyMonotoneAligner = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnBrowseMonotoneAlignedFile = new javax.swing.JButton();
        btnApplyNonMonotoneAlignment = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btnBrowseNonMonotoneFile = new javax.swing.JButton();
        btnApplyEventDetection = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnBrowseEventDetectedFile = new javax.swing.JButton();
        btnApplyContradictionAndPolarity = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        btnBrowsePolarityAnalysedFile = new javax.swing.JButton();
        btnApplyAntonymDetection = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        btnBrowseAntonymsDetectedFile = new javax.swing.JButton();
        btnApplyStandardSimMetrics = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mainprocessorxmltofeaturevector.MainProcessorXmlToFeatureVectorApp.class).getContext().getResourceMap(MainProcessorXmlToFeatureVectorView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        btnBrowseXmlFile.setText(resourceMap.getString("btnBrowseXmlFile.text")); // NOI18N
        btnBrowseXmlFile.setName("btnBrowseXmlFile"); // NOI18N
        btnBrowseXmlFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseXmlFileActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        btnBrowseOpenAmplifyResponsesFolder.setText(resourceMap.getString("btnBrowseOpenAmplifyResponsesFolder.text")); // NOI18N
        btnBrowseOpenAmplifyResponsesFolder.setEnabled(false);
        btnBrowseOpenAmplifyResponsesFolder.setName("btnBrowseOpenAmplifyResponsesFolder"); // NOI18N
        btnBrowseOpenAmplifyResponsesFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseOpenAmplifyResponsesFolderActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tarStatus.setColumns(20);
        tarStatus.setRows(5);
        tarStatus.setName("tarStatus"); // NOI18N
        jScrollPane1.setViewportView(tarStatus);

        btnProcess.setFont(resourceMap.getFont("btnProcess.font")); // NOI18N
        btnProcess.setForeground(resourceMap.getColor("btnProcess.foreground")); // NOI18N
        btnProcess.setText(resourceMap.getString("btnProcess.text")); // NOI18N
        btnProcess.setName("btnProcess"); // NOI18N
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        btnTagFile.setText(resourceMap.getString("btnTagFile.text")); // NOI18N
        btnTagFile.setName("btnTagFile"); // NOI18N
        btnTagFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTagFileActionPerformed(evt);
            }
        });

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        btnBrowseTaggedFile.setText(resourceMap.getString("btnBrowseTaggedFile.text")); // NOI18N
        btnBrowseTaggedFile.setEnabled(false);
        btnBrowseTaggedFile.setName("btnBrowseTaggedFile"); // NOI18N
        btnBrowseTaggedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTaggedFileActionPerformed(evt);
            }
        });

        btnRemoveStopWords.setText(resourceMap.getString("btnRemoveStopWords.text")); // NOI18N
        btnRemoveStopWords.setEnabled(false);
        btnRemoveStopWords.setName("btnRemoveStopWords"); // NOI18N
        btnRemoveStopWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveStopWordsActionPerformed(evt);
            }
        });

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        btnBrowseStopWordRemovedFile.setText(resourceMap.getString("btnBrowseStopWordRemovedFile.text")); // NOI18N
        btnBrowseStopWordRemovedFile.setEnabled(false);
        btnBrowseStopWordRemovedFile.setName("btnBrowseStopWordRemovedFile"); // NOI18N
        btnBrowseStopWordRemovedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseStopWordRemovedFileActionPerformed(evt);
            }
        });

        btnApplyPosFilter.setText(resourceMap.getString("btnApplyPosFilter.text")); // NOI18N
        btnApplyPosFilter.setEnabled(false);
        btnApplyPosFilter.setName("btnApplyPosFilter"); // NOI18N
        btnApplyPosFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyPosFilterActionPerformed(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        btnBrowsePosFilter.setText(resourceMap.getString("btnBrowsePosFilter.text")); // NOI18N
        btnBrowsePosFilter.setEnabled(false);
        btnBrowsePosFilter.setName("btnBrowsePosFilter"); // NOI18N
        btnBrowsePosFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePosFilterActionPerformed(evt);
            }
        });

        btnApplyMonotoneAligner.setText(resourceMap.getString("btnApplyMonotoneAligner.text")); // NOI18N
        btnApplyMonotoneAligner.setEnabled(false);
        btnApplyMonotoneAligner.setName("btnApplyMonotoneAligner"); // NOI18N
        btnApplyMonotoneAligner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyMonotoneAlignerActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        btnBrowseMonotoneAlignedFile.setText(resourceMap.getString("btnBrowseMonotoneAlignedFile.text")); // NOI18N
        btnBrowseMonotoneAlignedFile.setEnabled(false);
        btnBrowseMonotoneAlignedFile.setName("btnBrowseMonotoneAlignedFile"); // NOI18N
        btnBrowseMonotoneAlignedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseMonotoneAlignedFileActionPerformed(evt);
            }
        });

        btnApplyNonMonotoneAlignment.setText(resourceMap.getString("btnApplyNonMonotoneAlignment.text")); // NOI18N
        btnApplyNonMonotoneAlignment.setEnabled(false);
        btnApplyNonMonotoneAlignment.setName("btnApplyNonMonotoneAlignment"); // NOI18N
        btnApplyNonMonotoneAlignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyNonMonotoneAlignmentActionPerformed(evt);
            }
        });

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        btnBrowseNonMonotoneFile.setText(resourceMap.getString("btnBrowseNonMonotoneFile.text")); // NOI18N
        btnBrowseNonMonotoneFile.setEnabled(false);
        btnBrowseNonMonotoneFile.setName("btnBrowseNonMonotoneFile"); // NOI18N
        btnBrowseNonMonotoneFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseNonMonotoneFileActionPerformed(evt);
            }
        });

        btnApplyEventDetection.setText(resourceMap.getString("btnApplyEventDetection.text")); // NOI18N
        btnApplyEventDetection.setEnabled(false);
        btnApplyEventDetection.setName("btnApplyEventDetection"); // NOI18N
        btnApplyEventDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyEventDetectionActionPerformed(evt);
            }
        });

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        btnBrowseEventDetectedFile.setText(resourceMap.getString("btnBrowseEventDetectedFile.text")); // NOI18N
        btnBrowseEventDetectedFile.setEnabled(false);
        btnBrowseEventDetectedFile.setName("btnBrowseEventDetectedFile"); // NOI18N
        btnBrowseEventDetectedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseEventDetectedFileActionPerformed(evt);
            }
        });

        btnApplyContradictionAndPolarity.setText(resourceMap.getString("btnApplyContradictionAndPolarity.text")); // NOI18N
        btnApplyContradictionAndPolarity.setEnabled(false);
        btnApplyContradictionAndPolarity.setName("btnApplyContradictionAndPolarity"); // NOI18N
        btnApplyContradictionAndPolarity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyContradictionAndPolarityActionPerformed(evt);
            }
        });

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        btnBrowsePolarityAnalysedFile.setText(resourceMap.getString("btnBrowsePolarityAnalysedFile.text")); // NOI18N
        btnBrowsePolarityAnalysedFile.setEnabled(false);
        btnBrowsePolarityAnalysedFile.setName("btnBrowsePolarityAnalysedFile"); // NOI18N
        btnBrowsePolarityAnalysedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePolarityAnalysedFileActionPerformed(evt);
            }
        });

        btnApplyAntonymDetection.setText(resourceMap.getString("btnApplyAntonymDetection.text")); // NOI18N
        btnApplyAntonymDetection.setEnabled(false);
        btnApplyAntonymDetection.setName("btnApplyAntonymDetection"); // NOI18N
        btnApplyAntonymDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyAntonymDetectionActionPerformed(evt);
            }
        });

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        btnBrowseAntonymsDetectedFile.setText(resourceMap.getString("btnBrowseAntonymsDetectedFile.text")); // NOI18N
        btnBrowseAntonymsDetectedFile.setEnabled(false);
        btnBrowseAntonymsDetectedFile.setName("btnBrowseAntonymsDetectedFile"); // NOI18N
        btnBrowseAntonymsDetectedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseAntonymsDetectedFileActionPerformed(evt);
            }
        });

        btnApplyStandardSimMetrics.setText(resourceMap.getString("btnApplyStandardSimMetrics.text")); // NOI18N
        btnApplyStandardSimMetrics.setEnabled(false);
        btnApplyStandardSimMetrics.setName("btnApplyStandardSimMetrics"); // NOI18N
        btnApplyStandardSimMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyStandardSimMetricsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnProcess, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(btnBrowseXmlFile, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTagFile, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addComponent(btnBrowseOpenAmplifyResponsesFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBrowseAntonymsDetectedFile, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowseEventDetectedFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowsePolarityAnalysedFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowseNonMonotoneFile, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowseStopWordRemovedFile, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowseTaggedFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowsePosFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(btnBrowseMonotoneAlignedFile, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnApplyContradictionAndPolarity, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyAntonymDetection, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyMonotoneAligner, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyPosFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnRemoveStopWords, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyNonMonotoneAlignment, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyEventDetection, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(btnApplyStandardSimMetrics, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBrowseXmlFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnBrowseOpenAmplifyResponsesFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnTagFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowseTaggedFile)
                    .addComponent(btnRemoveStopWords)
                    .addComponent(jLabel4))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBrowseStopWordRemovedFile)
                            .addComponent(btnApplyPosFilter))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowsePosFilter)
                    .addComponent(btnApplyMonotoneAligner)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnBrowseMonotoneAlignedFile)
                    .addComponent(btnApplyNonMonotoneAlignment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(btnBrowseNonMonotoneFile)
                    .addComponent(btnApplyEventDetection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(btnBrowseEventDetectedFile))
                    .addComponent(btnApplyContradictionAndPolarity))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBrowsePolarityAnalysedFile)
                        .addComponent(jLabel10))
                    .addComponent(btnApplyAntonymDetection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(btnBrowseAntonymsDetectedFile))
                    .addComponent(btnApplyStandardSimMetrics))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnProcess, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBrowseTaggedFile, btnRemoveStopWords});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnApplyMonotoneAligner, btnApplyPosFilter, btnBrowsePosFilter, btnBrowseStopWordRemovedFile});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnApplyContradictionAndPolarity, btnBrowseEventDetectedFile});

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mainprocessorxmltofeaturevector.MainProcessorXmlToFeatureVectorApp.class).getContext().getActionMap(MainProcessorXmlToFeatureVectorView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 557, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseXmlFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseXmlFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseXmlFile : Browse XML file pressed. \n");

        String chooser_Title = "Select XML File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    //... Update input_XML_File_URL for process Button.
                    input_XML_File_URL = file.getAbsolutePath();

                    tarStatus.setText(tarStatus.getText() + "File : '" + input_XML_File_URL + "' : Choosen Successfully. Now choose OpenAmplify responses folder. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file to process. \n");
                }
            }

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseXmlFileActionPerformed

    private void btnBrowseOpenAmplifyResponsesFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseOpenAmplifyResponsesFolderActionPerformed

        /* Here we just show JfileChooser and select the folder */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseOpenAmplifyResponsesFolder : Browse OpenAmplify folder button pressed. \n");

        String chooser_Title = "Select OpenAmplify Responses Directory";

        try {
            chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle(chooser_Title);
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            // disable the "All files" option.            
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {

                /* Set URL for openAmplify */
                this.open_Amplify_Folder_URL = chooser.getSelectedFile().getAbsolutePath();

                /* selection proper */
                tarStatus.setText(tarStatus.getText() + "You have selected : '" + open_Amplify_Folder_URL + "' folder. \n");

            } else {
                tarStatus.setText(tarStatus.getText() + "Please choose proper OpenAmplify responses folder. \n");
            }

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }

    }//GEN-LAST:event_btnBrowseOpenAmplifyResponsesFolderActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnProcess : Process button pressed. \n");

        try {
            /*
             * Set properties values
             */
            properties.setInput_XML_File_URL(input_XML_File_URL);
            properties.setOpen_Amplify_Folder_URL(open_Amplify_Folder_URL);

            /*
             * Call processor i.e XmlToFeatureVectorProcessor
             */
            processor = new XmlToFeatureVectorProcessor(properties);

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnTagFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTagFileActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnTagFile : Tag button pressed. \n");

        try {
            /*
             * Set properties values
             */
            properties.setInput_XML_File_URL(input_XML_File_URL);

            /*
             * Call PosTagger class
             */
            tagger = new PosTagger(properties);

            tagger = null;
            System.gc();  

            tarStatus.setText(tarStatus.getText() + "Done tagging, output file is '" + properties.getTagged_Strings_XML_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnTagFileActionPerformed

    private void btnBrowseTaggedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTaggedFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseTaggedFile : Browse tagged XML file pressed. \n");

        String chooser_Title = "Select Tagged File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * set properties.setTagged_Strings_XML_File_URL
                     */
                    properties.setTagged_Strings_XML_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "Tagged File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Remove SWs'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }

    }//GEN-LAST:event_btnBrowseTaggedFileActionPerformed

    private void btnRemoveStopWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveStopWordsActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnRemoveStopWords : Remove Stop Words button pressed. \n");

        try {
            /*
             * Call StopWordRemover class
             */
            swRemover = new StopWordRemover(properties);

            swRemover = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done stop-words-removal, output file is '" + properties.getStop_Word_Removed_XML_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnRemoveStopWordsActionPerformed

    private void btnBrowseStopWordRemovedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseStopWordRemovedFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseStopWordRemovedFile : Browse stop-word-remnoved XML file pressed. \n");

        String chooser_Title = "Select Stop-Word_Removed File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * set properties.setStop_Word_Removed_XML_File_URL
                     */
                    properties.setStop_Word_Removed_XML_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "Stop-Word-Removed File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply PosFilter'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseStopWordRemovedFileActionPerformed

    private void btnApplyPosFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyPosFilterActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnApplyPosFilter : Apply POS Filter button pressed. \n");

        try {
            /*
             * Call PosBasedFilter class
             */
            posBasedFilter = new PosBasedFilter(properties);

            posBasedFilter = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done PosBasedFilter application, output file is '" + properties.getPos_Constraint_Applied_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyPosFilterActionPerformed

    private void btnBrowsePosFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePosFilterActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowsePosFilter : Browse PosFiltered XML file pressed. \n");

        String chooser_Title = "Select PosFiltered File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * set properties.setPos_Constraint_Applied_File_URL
                     */
                    properties.setPos_Constraint_Applied_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "Pos Constrained File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply Monotone'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowsePosFilterActionPerformed

    private void btnApplyMonotoneAlignerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyMonotoneAlignerActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnApplyMonotoneAligner : Apply Monotone Aligner button pressed. \n");

        try {
            /*
             * Call MonotoneAligner class
             */
            monotoneAligner = new MonotoneAligner(properties);

            monotoneAligner = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done Monotone Alignment application, output file is '" + properties.getMonotone_Aligned_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyMonotoneAlignerActionPerformed

    private void btnBrowseMonotoneAlignedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseMonotoneAlignedFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseMonotoneAlignedFile : 'Browse Monotone' Aligned XML file pressed. \n");

        String chooser_Title = "Select 'Monotone Aligned' File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * set properties.setMonotone_Aligned_File_URL
                     */
                    properties.setMonotone_Aligned_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "Monotone Aligned File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply non-Monotone'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseMonotoneAlignedFileActionPerformed

    private void btnApplyNonMonotoneAlignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyNonMonotoneAlignmentActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnApplyNonMonotoneAlignment : Apply non-Monotone Alignment button pressed. \n");

        try {
            /*
             * Call NonMonotoneAligner class
             */
            nonMonotoneAligner = new NonMonotoneAligner(properties);

            nonMonotoneAligner = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done non-Monotone Alignment application, output file is '" + properties.getNon_Monotone_Aligned_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyNonMonotoneAlignmentActionPerformed

    private void btnBrowseNonMonotoneFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseNonMonotoneFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseNonMonotoneFile : 'Browse Non-Monotone' Aligned XML file pressed. \n");

        String chooser_Title = "Select 'Non-Monotone Aligned' File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * set properties.setNon_Monotone_Aligned_File_URL
                     */
                    properties.setNon_Monotone_Aligned_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "Non-Monotone Aligned File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply Event Detection'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseNonMonotoneFileActionPerformed

    private void btnApplyEventDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyEventDetectionActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnApplyEventDetection : Apply 'Event Detection' button pressed. \n");

        try {
            /*
             * Call EventDetector class
             */
            eventDetector = new EventDetector(properties);

            eventDetector = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done 'Event Detection' application, output file is '" + properties.getEvent_Detector_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyEventDetectionActionPerformed

    private void btnBrowseEventDetectedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseEventDetectedFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseEventDetectedFile : 'Browse 'Event Detected' XML file pressed. \n");

        String chooser_Title = "Select 'Event Detected' File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * properties.setEvent_Detector_File_URL
                     */
                    properties.setEvent_Detector_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "'Event Detected' File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply Contradiction And Polarity'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseEventDetectedFileActionPerformed

    private void btnApplyContradictionAndPolarityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyContradictionAndPolarityActionPerformed

         tarStatus.setText(tarStatus.getText() + "\nbtnApplyContradictionAndPolarity : Apply 'Contradiction And Polarity' button pressed. \n");

        try {
            /*
             * Call ContradictionAndPolarityAnalyser class
             */
            contradictionAndPolarityAnalyser = new ContradictionAndPolarityAnalyser(properties);

            contradictionAndPolarityAnalyser = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done 'Contradiction And Polarity Analysis' application, output file is '" + properties.getContradiction_And_Polarity_Analyser_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyContradictionAndPolarityActionPerformed

    private void btnBrowsePolarityAnalysedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePolarityAnalysedFileActionPerformed

         /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowsePolarityAnalysedFile : 'Browse 'Polarity Analysed' XML file pressed. \n");

        String chooser_Title = "Select 'Polarity Analysed' File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * properties.setContradiction_And_Polarity_Analyser_File_URL
                     */
                    properties.setContradiction_And_Polarity_Analyser_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "'Contradiction and Polarity Analysed' File : '" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply Antonym Detection'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowsePolarityAnalysedFileActionPerformed

    private void btnApplyAntonymDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyAntonymDetectionActionPerformed

        tarStatus.setText(tarStatus.getText() + "\nbtnApplyAntonymDetection : Apply 'Antonym Detection' button pressed. \n");

        try {
            /*
             * Call AntonymMatchDetector class
             */
            antonymMatchDetector = new AntonymMatchDetector(properties);

            antonymMatchDetector = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done 'Antonym Detection' application, output file is '" + properties.getAntonym_Match_Detector_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyAntonymDetectionActionPerformed

    private void btnBrowseAntonymsDetectedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseAntonymsDetectedFileActionPerformed

        /* Here we just show JfileChooser and select the file */
        tarStatus.setText(tarStatus.getText() + "\nbtnBrowseAntonymsDetectedFile : Browse 'Antonyms Detected' XML file pressed. \n");

        String chooser_Title = "Select 'Antonyms Detected' File to Process";

        try {
            chooser.setDialogTitle(chooser_Title);

            /* Open a file dialog. */
            int retval = chooser.showOpenDialog(mainPanel);

            if (retval == JFileChooser.APPROVE_OPTION) {
                //... The user selected a file, get it, use it.
                File file = chooser.getSelectedFile();

                // check if the selected file is .xml
                if (file.getName().toLowerCase().endsWith(".xml")) {

                    /*
                     * properties.setContradiction_And_Polarity_Analyser_File_URL
                     */
                    properties.setAntonym_Match_Detector_File_URL(file.getAbsolutePath());

                    tarStatus.setText(tarStatus.getText() + "'Antonyms Detected' File :" + file.getAbsolutePath() + "' : Choosen Successfully. Now press 'Apply Standard Similarity'. \n");

                } else {
                    // ask user to select .xml file
                    tarStatus.setText(tarStatus.getText() + "Please choose proper .xml file. \n");
                }
            }
        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnBrowseAntonymsDetectedFileActionPerformed

    private void btnApplyStandardSimMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyStandardSimMetricsActionPerformed

         tarStatus.setText(tarStatus.getText() + "\nbtnApplyStandardSimMetrics : Apply 'Standard Similarity Metrics' button pressed. \n");

        try {
            /*
             * Call StandardSimilarityAnalyser class
             */
            standardSimilarityAnalysed = new StandardSimilarityAnalyser(properties);

            standardSimilarityAnalysed = null;
            System.gc();

            tarStatus.setText(tarStatus.getText() + "Done 'Standard Simmilarity Analysis' application, output file is '" + properties.getStandard_Similarity_Analysed_File_URL() + "'\n");

        } catch (Exception ex) {
            tarStatus.setText(tarStatus.getText() + ex + "\n");
            tarStatus.setText(tarStatus.getText() + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnApplyStandardSimMetricsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyAntonymDetection;
    private javax.swing.JButton btnApplyContradictionAndPolarity;
    private javax.swing.JButton btnApplyEventDetection;
    private javax.swing.JButton btnApplyMonotoneAligner;
    private javax.swing.JButton btnApplyNonMonotoneAlignment;
    private javax.swing.JButton btnApplyPosFilter;
    private javax.swing.JButton btnApplyStandardSimMetrics;
    private javax.swing.JButton btnBrowseAntonymsDetectedFile;
    private javax.swing.JButton btnBrowseEventDetectedFile;
    private javax.swing.JButton btnBrowseMonotoneAlignedFile;
    private javax.swing.JButton btnBrowseNonMonotoneFile;
    private javax.swing.JButton btnBrowseOpenAmplifyResponsesFolder;
    private javax.swing.JButton btnBrowsePolarityAnalysedFile;
    private javax.swing.JButton btnBrowsePosFilter;
    private javax.swing.JButton btnBrowseStopWordRemovedFile;
    private javax.swing.JButton btnBrowseTaggedFile;
    private javax.swing.JButton btnBrowseXmlFile;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRemoveStopWords;
    private javax.swing.JButton btnTagFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextArea tarStatus;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    /*
     * Manual declarations 
     */
    private JFileChooser chooser;
    XmlToFeatureVectorProcessor processor;
    Properties properties;
    private String input_XML_File_URL;
    private String open_Amplify_Folder_URL;

    /*
     * Helper Classes
     */
    PosTagger tagger;
    StopWordRemover swRemover;
    PosBasedFilter posBasedFilter;
    MonotoneAligner monotoneAligner;
    NonMonotoneAligner nonMonotoneAligner;
    EventDetector eventDetector;
    ContradictionAndPolarityAnalyser contradictionAndPolarityAnalyser;
    AntonymMatchDetector antonymMatchDetector;
    StandardSimilarityAnalyser standardSimilarityAnalysed;
}
